name: TEST Release OIBus version

on:
  workflow_dispatch:
  push:
    branches:
      - v2

concurrency:
  # New commit on branch cancels running workflows of the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: 'Tag new version'
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release.outputs.tag_name }}
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          signoff: "Optimistik SAS <optimistiksas@users.noreply.github.com>"
          default-branch: v2
          config-file: .github/release-please-config.json
          manifest-file: .github/release-please-manifest.json

      - uses: actions/checkout@v3
        if: ${{ steps.release.outputs.release_created }}

      - name: Tag major and minor versions
        if: ${{ steps.release.outputs.release_created }}
        run: |
          git config user.name "Optimistik SAS"
          git config user.email optimistiksas@users.noreply.github.com
          git remote add gh-token "https://${{ secrets.GITHUB_TOKEN }}@github.com/google-github-actions/release-please-action.git"
          git tag -d v${{ steps.release.outputs.major }} || true
          git tag -d v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} || true
          git push origin :v${{ steps.release.outputs.major }} || true
          git push origin :v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} || true
          git tag -a v${{ steps.release.outputs.major }} -m "Release v${{ steps.release.outputs.major }}"
          git tag -a v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }} -m "Release v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}"
          git push origin v${{ steps.release.outputs.major }}
          git push origin v${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}

      - name: Set outputs
        if: ${{ steps.release.outputs.release_created }}
        run: |
          echo "release_created=steps.release.outputs.release_created" >> $GITHUB_OUTPUT
          echo "tag_name=steps.release.outputs.tag_name" >> $GITHUB_OUTPUT

  build-binaries:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    name: Build for ${{ matrix.config['friendlyName'] }}
    runs-on: ${{ matrix.config['os'] }}
    strategy:
      matrix:
        config:
          - { friendlyName: 'Mac OS x64', os: 'macos-latest',   platform: 'macos', archiveName: 'oibus-macos.zip', zip: 'zip -r' }
          - { friendlyName: 'Windows x64', os: 'windows-latest', platform: 'win',   archiveName: 'oibus-win32x64.zip', zip: '7z a -tzip' }
          - { friendlyName: 'Linux x64', os: 'ubuntu-latest',  platform: 'linux', archiveName: 'oibus-linux.tar.gz', zip: 'tar -czvf' }
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.standard-version.outputs.branch-release }}

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}

      - name: Build OIBus for ${{ matrix.config['friendlyName'] }}
        if: ${{ matrix.config['platform'] != 'linux-arm64' }}
        run: npm run build:${{ matrix.config['platform'] }}

      - name: Test OIBus run for ${{ matrix.config['friendlyName'] }}
        run: |
          cd build/bin/${{ matrix.config['platform'] }}
          ./oibus --config ../../../data-folder --check true

      - name: Package OIBus for ${{ matrix.config['friendlyName'] }}
        run: |
          cd build/bin/${{ matrix.config['platform'] }}
          ${{ matrix.config['zip'] }} ../${{ matrix.config['archiveName'] }} .

      - name: Upload Artifact ${{ matrix.config['archiveName'] }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          gh release upload ${{ inputs.tag_name }} ./build/bin/${{ matrix.config['archiveName'] }}

#      - name: Package Windows installer
#        env:
#          PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
#          PFX_BASE64_CONTENT: ${{ secrets.PFX_BASE64_CONTENT }}
#          PFX_PATH: C://oibus.pfx
#        if: ${{ matrix.config['platform'] == 'win' }}
#        shell: pwsh
#        working-directory: ./build/bin/win
#        run: |
#          $encodedBytes = [System.Convert]::FromBase64String("$env:PFX_BASE64_CONTENT")
#          Set-Content -Path "$env:PFX_PATH" -AsByteStream -Value $encodedBytes
#          npm run build:win-setup
#          Remove-Item -Path "$env:PFX_PATH";
#
#      - name: Rename windows installer
#        if: ${{ matrix.config['platform'] == 'win' }}
#        run: mv ./build/bin/win-setup-release/oibus-setup.exe ./build/bin/win-setup-release/oibus-setup-win32x64.exe
#
#      - name: Upload Windows installer Artifact ${{ matrix.config['archiveName'] }}
#        if: ${{ matrix.config['platform'] == 'win' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run:
#          gh release upload ${{ inputs.tag_name }} ./build/bin/win-setup-release/oibus-setup-win32x64.exe