name: release
on:
  workflow_dispatch:
jobs:
  release:
    name: 'New release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Bump version
        id: standard-version
        run: |
          git config --global user.name 'optimistik-actions'
          git config --global user.email 'optimistiksas@users.noreply.github.com'
          VERSION_ARGS=""
          PRERELEASE=false
          BRANCH=$(git branch --show-current| tr '\\/' - | tr -dc '[:alnum:]-+.\n\r' ) # first tr replace / and \ to -, second tr removes all non alphanums except .+-\n\r)
          if [ "$BRANCH" != release ]; then
            VERSION_ARGS="--prerelease ${BRANCH}"
            PRERELEASE=true
          fi
          npm ci
          npm run bump -- $VERSION_ARGS
          echo ::set-output name=version-tag::$(git describe --tags $(git rev-list --tags --max-count=1)) 
          echo ::set-output name=prerelease::$PRERELEASE 

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.standard-version.outputs.version-tag }}
          name: ${{ steps.standard-version.outputs.version-tag }}
          body_path: CHANGELOG.md
          prerelease: ${{ steps.standard-version.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN}} # Need REPO_ACCESS_TOKEN to propagate 'release published' event

  publish-executables:
    name: 'Publish executable packages'
    needs: release
    runs-on: ${{ matrix.config['os'] }}
    strategy:
      matrix:
        node-version: [ 16.x ]
        config:
          - { os: 'macos-latest',   platform: 'macos', archiveName: 'OIBus-macos.zip', zip: 'zip -r' }
          - { os: 'windows-latest', platform: 'win',   archiveName: 'OIBus-win32x64.zip', zip: '7z a -tzip' }
          - { os: 'ubuntu-latest',  platform: 'linux', archiveName: 'OIBus-linux.zip', zip: 'zip -r' }
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Package OIBus for ${{ matrix.config['platform'] }}
        run: |
          npm run build-${{ matrix.config['platform'] }}
          cd dist/${{ matrix.config['platform'] }}
          dir
          ./oibus --config ../../tests/oibus.json --check true
          ${{ matrix.config['zip'] }} ../oibus.zip .
      - name: Upload ${{ matrix.config['archiveName'] }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            await github.rest.repos.uploadReleaseAsset({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              release_id: context.payload.release.id,
              name: '${{ matrix.config['archiveName'] }}',
              data: fs.readFileSync('./dist/oibus.zip')
            })
      - name: Build Windows installer
        if: ${{ matrix.config['platform'] === 'win' }}
        run: npm run build-win-setup
        working-directory: ./dist/win
        shell: cmd
      - name: Publish Windows installer
        if: ${{ matrix.config['platform'] === 'win' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            await github.rest.repos.uploadReleaseAsset({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              release_id: context.payload.release.id,
              name: 'OIBus-setup-win32x64.exe',
              data: fs.readFileSync('./dist/win-setup-release/oibus_setup.exe')
            })

